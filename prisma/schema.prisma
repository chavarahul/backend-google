generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

enum AlbumStatus {
  SHARED
  SYNCING
  BACKED_UP
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  phone          String?
  phoneVerified  DateTime?
  image          String?
  password       String?

  accounts       Account[]
  sessions       Session[]
  albums         Album[]
  otps           Otp[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Otp {
  id         String   @id @default(uuid())
  email      String
  code       String
  expiresAt  DateTime

  createdAt  DateTime @default(now())

  User User[]
}

model Album {
  id          String       @id @default(uuid())
  name        String
  date        DateTime
  coverImage  String?
  status      AlbumStatus?
  photoCount  Int          @default(0)
  userId      String

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model Photo {
  id         String     @id @default(uuid())
  albumId    String
  url        String
  caption    String?

  album      Album      @relation(fields: [albumId], references: [id], onDelete: Cascade)

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([albumId])
}

model Account {
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  expiresAt          Int?
  tokenType          String?
  scope              String?
  idToken            String?
  sessionState       String?

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}